version: '3.3'

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    image: api
    restart: unless-stopped
    env_file:
      - server.env
    ports:
      - 5000
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=project.config.ProductionConfig
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./data/uploads:/usr/src/app/uploads



  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - 27017
    volumes:
      - ./db-data:/data/db

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    depends_on:
      - api
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  worker:
    image: api
    command: rq worker --url redis://redis:6379
    env_file:
      - server.env
    volumes:
      - ./data/uploads:/usr/src/app/uploads
    depends_on:
      - redis
      - api

  rq-dashboard:
    image: eoranged/rq-dashboard
    ports:
      - "9181:9181"
    environment: 
     - RQ_DASHBOARD_REDIS_URL=redis://redis:6379
    depends_on: 
      - redis

  redis:
    image: redis:6.2-alpine


  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"



volumes:
  db-data: